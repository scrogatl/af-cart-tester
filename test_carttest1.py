# Generated by Selenium IDE
import pytest
import time
import logging
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException
from selenium.webdriver.firefox.options import Options


class TestCarttest1():
  def setup_method(self):
    # self.driver = webdriver.Firefox()
    # self.vars = {}
    options = Options()
    options.add_argument("--headless")
    self.driver = webdriver.Firefox(options=options)

  def do_quit_routine(self):
    logging.info("do_quit")
    self.teardown_method()
    quit()

  def teardown_method(self):
    self.driver.quit()
  
  def test_carttest1(self):
    logging.basicConfig(format='%(asctime)s %(message)s', datefmt='%m/%d/%Y %I:%M:%S %p',level=logging.INFO)
    self.driver.get("https://acme-fitness.scrog.tap-next.blah.cloud/")
    self.driver.set_window_size(1396, 1028)
    time.sleep(2)
    try: 
      self.driver.find_element(By.CSS_SELECTOR, ".d-none > .btn-outline-secondary").click()
      self.driver.find_element(By.ID, "login").click()
      logging.info("Begin login...")
    except Exception as e: 
      logging.warning("Unable to login")
      self.do_quit_routine()
    time.sleep(2)
    self.driver.find_element(By.ID, "usernameOnly").send_keys("admin")
    self.driver.find_element(By.ID, "usernameOnly").send_keys(Keys.ENTER)
    time.sleep(2)
    self.driver.find_element(By.ID, "password").send_keys("admin")
    self.driver.find_element(By.ID, "password").send_keys(Keys.ENTER)
    logging.info("Successful login")
    
    try:
        element = WebDriverWait(self.driver, 10).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, ".owl-item:nth-child(2) .img-fluid"))
        )
        element.click()
        # self.driver.find_element(By.CSS_SELECTOR, ".owl-item:nth-child(2) .img-fluid").click()
        logging.info("Added water bottle")
    except TimeoutException:
        logging.warning("Unable to find water bottle. Timed out.")
        return
    
    try:
        element = WebDriverWait(self.driver, 10).until(
            EC.presence_of_element_located((By.ID, "addToCart"))
        )
    except TimeoutException:
        logging.warning("Unable to addToCart. Timed out.")
        return
    self.driver.find_element(By.ID, "addToCart").click()
    logging.info("added to cart")
    
    try:
        element = WebDriverWait(self.driver, 20).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, ".d-none > .btn-outline-primary"))
        )
        self.driver.find_element(By.CSS_SELECTOR, ".d-none > .btn-outline-primary").click()
    except TimeoutException:
        logging.warning("Unable to addToCart. Timed out.")
        return
    
    try:
        element = WebDriverWait(self.driver, 10).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, ".fa-trash-o"))
        )
        self.driver.find_element(By.CSS_SELECTOR, ".fa-trash-o").click()
    except TimeoutException:
        logging.warning("Unable to addToCart. Timed out.")
        return
    time.sleep(2)
    self.driver.find_element(By.CSS_SELECTOR, ".d-none > .btn-outline-primary").click() 
    logging.info("finished")


if __name__ == "__main__":
  while(True):
    cartTest = TestCarttest1() 
    cartTest.setup_method()
    cartTest.test_carttest1()
    cartTest.teardown_method()
    time.sleep(2)
